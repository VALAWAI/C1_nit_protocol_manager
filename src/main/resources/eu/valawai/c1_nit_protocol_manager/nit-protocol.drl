/*
  Copyright 2023 UDT-IA, IIIA-CSIC

  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/

package eu.valawai.c1_nit_protocol_manager;

import eu.valawai.c1_nit_protocol_manager.messages.TreatmentPayload;
import eu.valawai.c1_nit_protocol_manager.messages.PatientStatusCriteriaPayload;
import eu.valawai.c1_nit_protocol_manager.messages.TreatmentAction;
import eu.valawai.c1_nit_protocol_manager.messages.NITLevel;
import eu.valawai.c1_nit_protocol_manager.messages.TreatmentActionFeedbackService;

global TreatmentActionFeedbackService service;


rule "NIT Level 1 allow all actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.ONE)
		$action: TreatmentAction() from $treatment.actions
	then
		service.sendAllow($treatment.id,$action);
end

rule "NIT Level 2A allowed actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.TWO_A)
		$action: TreatmentAction() from $treatment.actions
		eval($action != TreatmentAction.CPR)
	then
		service.sendAllow($treatment.id,$action);
end

rule "NIT Level 2A denied actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.TWO_A)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.CPR)
	then
		service.sendDeny($treatment.id,$action);
end


rule "NIT Level 2B allowed actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.TWO_B)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.NIMV || $action == TreatmentAction.VASOACTIVE_DRUGS || $action == TreatmentAction.DIALYSIS || $action == TreatmentAction.SIMPLE_CLINICAL_TRIAL || $action == TreatmentAction.MEDIUM_CLINICAL_TRIAL || $action == TreatmentAction.ADVANCED_CLINICAL_TRIAL)
	then
		service.sendAllow($treatment.id,$action);
end

rule "NIT Level 2B denied actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.TWO_B)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.CPR || $action == TreatmentAction.ICU)
	then
		service.sendDeny($treatment.id,$action);
end

rule "NIT Level 2B unknown actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.TWO_B)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.TRANSPLANT || $action == TreatmentAction.PALLIATIVE_SURGERY || $action == TreatmentAction.CURE_SURGERY)
	then
		service.sendUnknown($treatment.id,$action);
end

rule "NIT Level 3 denied actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.THREE)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.CPR || $action == TreatmentAction.ICU)
	then
		service.sendDeny($treatment.id,$action);
end

rule "NIT Level 3 unknown actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.THREE)
		$action: TreatmentAction() from $treatment.actions
		eval($action != TreatmentAction.CPR && $action != TreatmentAction.ICU)
	then
		service.sendUnknown($treatment.id,$action);
end

rule "NIT Level 4 denied actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.FOUR)
		$action: TreatmentAction() from $treatment.actions
		eval($action != TreatmentAction.VASOACTIVE_DRUGS && $action != TreatmentAction.NIMV)
	then
		service.sendDeny($treatment.id,$action);
end

rule "NIT Level 4 unknown actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.FOUR)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.VASOACTIVE_DRUGS || $action == TreatmentAction.NIMV)
	then
		service.sendUnknown($treatment.id,$action);
end

rule "NIT Level 5 denied actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.FIVE)
		$action: TreatmentAction() from $treatment.actions
		eval($action != TreatmentAction.NIMV)
	then
		service.sendDeny($treatment.id,$action);
end

rule "NIT Level 5 unknown actions"
	when
		$treatment: TreatmentPayload(before_status != null,before_status.nit_level == NITLevel.FIVE)
		$action: TreatmentAction() from $treatment.actions
		eval($action == TreatmentAction.NIMV)
	then
		service.sendUnknown($treatment.id,$action);
end

rule "Unknown NIT Level => unknown actions"
	when
		$treatment: TreatmentPayload(before_status != null, before_status.nit_level == null)
		$action: TreatmentAction() from $treatment.actions
	then
		service.sendUnknown($treatment.id,$action);
end

rule "Unknown before status => unknown actions"
	when
		$treatment: TreatmentPayload(before_status == null)
		$action: TreatmentAction() from $treatment.actions
	then
		service.sendUnknown($treatment.id,$action);
end
